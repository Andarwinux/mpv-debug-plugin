name: build

on:
  workflow_dispatch:

jobs:
  win:
    runs-on: windows-latest
    name: Windows
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: msys2/setup-msys2@v2
        with:
          msystem: clang64
          install: >-
            base-devel
            git
            mingw-w64-clang-x86_64-clang
            mingw-w64-clang-x86_64-cmake
            mingw-w64-clang-x86_64-ninja
            mingw-w64-clang-x86_64-mpv
          update: true
      - name: Build
        shell: msys2 {0}
        run: |
          export CFLAGS="-march=tigerlake -mprefer-vector-width=512 -O3 -flto=full -mguard=cf -fcf-protection=full -D_WIN32_WINNT=0x0A00 -DWINVER=0x0A00 -fvisibility=hidden -fvirtual-function-elimination -fwhole-program-vtables -fdata-sections -ffunction-sections -fno-unwind-tables -fno-asynchronous-unwind-tables -fomit-frame-pointer -fno-emulated-tls -pthread"
          export CXXFLAGS="$CFLAGS"
          export LDFLAGS="$CFLAGS -fuse-ld=lld -Wl,-s,-O3,--gc-sections,--icf=all,--no-insert-timestamp,--major-os-version=10,--major-subsystem-version=6,--minor-subsystem-version=2,--file-alignment=4096 -Xlinker -Xlink=-cetcompat -Xlinker -Xlink=-guard:cf,longjmp,ehcont -Xlinker -Xlink=-opt:lldlto=3 -Xlinker -Xlink=-opt:lldltocgo=3"
          mkdir build && cd build
          cmake -DCMAKE_BUILD_TYPE=RELEASE \
            -DCMAKE_SHARED_LINKER_FLAGS="-static" \
            -G Ninja ..
          cmake --build .
      - uses: actions/upload-artifact@v4
        with:
          name: debug.win32
          path: build/debug.dll
  linux:
    runs-on: ubuntu-latest
    name: Linux
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install dependencies
        run: |
          sudo add-apt-repository universe
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build git pkg-config libmpv-dev xorg-dev clang lld
      - name: Build
        run: |
          mkdir build && cd build
          export CFLAGS="-march=tigerlake -mprefer-vector-width=512 -O3 -flto=full -fsanitize=scudo -fcf-protection=full -fvisibility=hidden -fvirtual-function-elimination -fwhole-program-vtables -fdata-sections -ffunction-sections -fno-unwind-tables -fno-asynchronous-unwind-tables -fomit-frame-pointer -fno-emulated-tls -pthread"
          export CXXFLAGS="$CFLAGS"
          export LDFLAGS="$CFLAGS -fuse-ld=lld -Wl,-s,-O3,--gc-sections,--icf=all"
          cmake -DCMAKE_BUILD_TYPE=RELEASE \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ \
            -G Ninja ..
          cmake --build .
      - uses: actions/upload-artifact@v4
        with:
          name: debug.linux
          path: build/debug.so
  publish:
    needs: [win, linux]
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
      - name: Zip files
        run: |
          mkdir debug
          mv debug.*/debug.* debug/
          zip -r debug.zip debug
      - uses: rickstaa/action-create-tag@v1
        with:
          tag: dev
          force_push_tag: true
      - uses: ncipollo/release-action@v1
        with:
          commit: ${{ github.sha }}
          tag: dev
          artifacts: "debug.zip"
          allowUpdates: true
          name: Latest build
          body: Latest build
